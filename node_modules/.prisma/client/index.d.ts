
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type UsersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    tokens: TokensPayload<ExtArgs>[]
    Recharge: RechargePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    email: string
    password: string
    createdAt: Date
  }, ExtArgs["result"]["users"]>
  composites: {}
}

/**
 * Model Users
 * 
 */
export type Users = runtime.Types.DefaultSelection<UsersPayload>
export type TokensPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    user: UsersPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    token: string
    userId: string
  }, ExtArgs["result"]["tokens"]>
  composites: {}
}

/**
 * Model Tokens
 * 
 */
export type Tokens = runtime.Types.DefaultSelection<TokensPayload>
export type SuitablePlanetsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    Stations: StationsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    mass: number
    hasStation: boolean
  }, ExtArgs["result"]["suitablePlanets"]>
  composites: {}
}

/**
 * Model SuitablePlanets
 * 
 */
export type SuitablePlanets = runtime.Types.DefaultSelection<SuitablePlanetsPayload>
export type StationsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    suitablePlanets: SuitablePlanetsPayload<ExtArgs>
    Recharge: RechargePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    planetId: string
  }, ExtArgs["result"]["stations"]>
  composites: {}
}

/**
 * Model Stations
 * 
 */
export type Stations = runtime.Types.DefaultSelection<StationsPayload>
export type RechargePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  objects: {
    user: UsersPayload<ExtArgs>
    stations: StationsPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    start: Date
    end: Date
    reservation: boolean
    status: string
    userId: string
    stationId: string
    updatedAt: Date
  }, ExtArgs["result"]["recharge"]>
  composites: {}
}

/**
 * Model Recharge
 * 
 */
export type Recharge = runtime.Types.DefaultSelection<RechargePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.tokens`: Exposes CRUD operations for the **Tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.tokens.findMany()
    * ```
    */
  get tokens(): Prisma.TokensDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.suitablePlanets`: Exposes CRUD operations for the **SuitablePlanets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SuitablePlanets
    * const suitablePlanets = await prisma.suitablePlanets.findMany()
    * ```
    */
  get suitablePlanets(): Prisma.SuitablePlanetsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.stations`: Exposes CRUD operations for the **Stations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stations
    * const stations = await prisma.stations.findMany()
    * ```
    */
  get stations(): Prisma.StationsDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.recharge`: Exposes CRUD operations for the **Recharge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recharges
    * const recharges = await prisma.recharge.findMany()
    * ```
    */
  get recharge(): Prisma.RechargeDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.1
   * Query Engine version: b20ead4d3ab9e78ac112966e242ded703f4a052c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Tokens: 'Tokens',
    SuitablePlanets: 'SuitablePlanets',
    Stations: 'Stations',
    Recharge: 'Recharge'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'tokens' | 'suitablePlanets' | 'stations' | 'recharge'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Users: {
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersPayload> | null
            payload: UsersPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersPayload>
            payload: UsersPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersPayload> | null
            payload: UsersPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersPayload>
            payload: UsersPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersPayload>[]
            payload: UsersPayload<ExtArgs>
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersPayload>
            payload: UsersPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UsersPayload<ExtArgs>
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersPayload>
            payload: UsersPayload<ExtArgs>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersPayload>
            payload: UsersPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UsersPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: UsersPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UsersPayload>
            payload: UsersPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
            payload: UsersPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
            payload: UsersPayload<ExtArgs>
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
            payload: UsersPayload<ExtArgs>
          }
        }
      }
      Tokens: {
        operations: {
          findUnique: {
            args: Prisma.TokensFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokensPayload> | null
            payload: TokensPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.TokensFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokensPayload>
            payload: TokensPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.TokensFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokensPayload> | null
            payload: TokensPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.TokensFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokensPayload>
            payload: TokensPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.TokensFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokensPayload>[]
            payload: TokensPayload<ExtArgs>
          }
          create: {
            args: Prisma.TokensCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokensPayload>
            payload: TokensPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.TokensCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: TokensPayload<ExtArgs>
          }
          delete: {
            args: Prisma.TokensDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokensPayload>
            payload: TokensPayload<ExtArgs>
          }
          update: {
            args: Prisma.TokensUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokensPayload>
            payload: TokensPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.TokensDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: TokensPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.TokensUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: TokensPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.TokensUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TokensPayload>
            payload: TokensPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.TokensAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTokens>
            payload: TokensPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.TokensGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TokensGroupByOutputType>[]
            payload: TokensPayload<ExtArgs>
          }
          count: {
            args: Prisma.TokensCountArgs<ExtArgs>,
            result: $Utils.Optional<TokensCountAggregateOutputType> | number
            payload: TokensPayload<ExtArgs>
          }
        }
      }
      SuitablePlanets: {
        operations: {
          findUnique: {
            args: Prisma.SuitablePlanetsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuitablePlanetsPayload> | null
            payload: SuitablePlanetsPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.SuitablePlanetsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuitablePlanetsPayload>
            payload: SuitablePlanetsPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.SuitablePlanetsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuitablePlanetsPayload> | null
            payload: SuitablePlanetsPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.SuitablePlanetsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuitablePlanetsPayload>
            payload: SuitablePlanetsPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.SuitablePlanetsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuitablePlanetsPayload>[]
            payload: SuitablePlanetsPayload<ExtArgs>
          }
          create: {
            args: Prisma.SuitablePlanetsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuitablePlanetsPayload>
            payload: SuitablePlanetsPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.SuitablePlanetsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: SuitablePlanetsPayload<ExtArgs>
          }
          delete: {
            args: Prisma.SuitablePlanetsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuitablePlanetsPayload>
            payload: SuitablePlanetsPayload<ExtArgs>
          }
          update: {
            args: Prisma.SuitablePlanetsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuitablePlanetsPayload>
            payload: SuitablePlanetsPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.SuitablePlanetsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: SuitablePlanetsPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.SuitablePlanetsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: SuitablePlanetsPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.SuitablePlanetsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<SuitablePlanetsPayload>
            payload: SuitablePlanetsPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.SuitablePlanetsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSuitablePlanets>
            payload: SuitablePlanetsPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.SuitablePlanetsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SuitablePlanetsGroupByOutputType>[]
            payload: SuitablePlanetsPayload<ExtArgs>
          }
          count: {
            args: Prisma.SuitablePlanetsCountArgs<ExtArgs>,
            result: $Utils.Optional<SuitablePlanetsCountAggregateOutputType> | number
            payload: SuitablePlanetsPayload<ExtArgs>
          }
        }
      }
      Stations: {
        operations: {
          findUnique: {
            args: Prisma.StationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StationsPayload> | null
            payload: StationsPayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.StationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StationsPayload>
            payload: StationsPayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.StationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StationsPayload> | null
            payload: StationsPayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.StationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StationsPayload>
            payload: StationsPayload<ExtArgs>
          }
          findMany: {
            args: Prisma.StationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StationsPayload>[]
            payload: StationsPayload<ExtArgs>
          }
          create: {
            args: Prisma.StationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StationsPayload>
            payload: StationsPayload<ExtArgs>
          }
          createMany: {
            args: Prisma.StationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: StationsPayload<ExtArgs>
          }
          delete: {
            args: Prisma.StationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StationsPayload>
            payload: StationsPayload<ExtArgs>
          }
          update: {
            args: Prisma.StationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StationsPayload>
            payload: StationsPayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.StationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: StationsPayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.StationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: StationsPayload<ExtArgs>
          }
          upsert: {
            args: Prisma.StationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<StationsPayload>
            payload: StationsPayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.StationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStations>
            payload: StationsPayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.StationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StationsGroupByOutputType>[]
            payload: StationsPayload<ExtArgs>
          }
          count: {
            args: Prisma.StationsCountArgs<ExtArgs>,
            result: $Utils.Optional<StationsCountAggregateOutputType> | number
            payload: StationsPayload<ExtArgs>
          }
        }
      }
      Recharge: {
        operations: {
          findUnique: {
            args: Prisma.RechargeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargePayload> | null
            payload: RechargePayload<ExtArgs>
          }
          findUniqueOrThrow: {
            args: Prisma.RechargeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargePayload>
            payload: RechargePayload<ExtArgs>
          }
          findFirst: {
            args: Prisma.RechargeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargePayload> | null
            payload: RechargePayload<ExtArgs>
          }
          findFirstOrThrow: {
            args: Prisma.RechargeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargePayload>
            payload: RechargePayload<ExtArgs>
          }
          findMany: {
            args: Prisma.RechargeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargePayload>[]
            payload: RechargePayload<ExtArgs>
          }
          create: {
            args: Prisma.RechargeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargePayload>
            payload: RechargePayload<ExtArgs>
          }
          createMany: {
            args: Prisma.RechargeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: RechargePayload<ExtArgs>
          }
          delete: {
            args: Prisma.RechargeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargePayload>
            payload: RechargePayload<ExtArgs>
          }
          update: {
            args: Prisma.RechargeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargePayload>
            payload: RechargePayload<ExtArgs>
          }
          deleteMany: {
            args: Prisma.RechargeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: RechargePayload<ExtArgs>
          }
          updateMany: {
            args: Prisma.RechargeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
            payload: RechargePayload<ExtArgs>
          }
          upsert: {
            args: Prisma.RechargeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RechargePayload>
            payload: RechargePayload<ExtArgs>
          }
          aggregate: {
            args: Prisma.RechargeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRecharge>
            payload: RechargePayload<ExtArgs>
          }
          groupBy: {
            args: Prisma.RechargeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RechargeGroupByOutputType>[]
            payload: RechargePayload<ExtArgs>
          }
          count: {
            args: Prisma.RechargeCountArgs<ExtArgs>,
            result: $Utils.Optional<RechargeCountAggregateOutputType> | number
            payload: RechargePayload<ExtArgs>
          }
        }
      }
    }
  } & {
    other: {
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
          payload: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
          payload: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
          payload: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
          payload: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    tokens: number
    Recharge: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    tokens?: boolean | UsersCountOutputTypeCountTokensArgs
    Recharge?: boolean | UsersCountOutputTypeCountRechargeArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTokensArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TokensWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRechargeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RechargeWhereInput
  }



  /**
   * Count Type SuitablePlanetsCountOutputType
   */


  export type SuitablePlanetsCountOutputType = {
    Stations: number
  }

  export type SuitablePlanetsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Stations?: boolean | SuitablePlanetsCountOutputTypeCountStationsArgs
  }

  // Custom InputTypes

  /**
   * SuitablePlanetsCountOutputType without action
   */
  export type SuitablePlanetsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuitablePlanetsCountOutputType
     */
    select?: SuitablePlanetsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SuitablePlanetsCountOutputType without action
   */
  export type SuitablePlanetsCountOutputTypeCountStationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: StationsWhereInput
  }



  /**
   * Count Type StationsCountOutputType
   */


  export type StationsCountOutputType = {
    Recharge: number
  }

  export type StationsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Recharge?: boolean | StationsCountOutputTypeCountRechargeArgs
  }

  // Custom InputTypes

  /**
   * StationsCountOutputType without action
   */
  export type StationsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StationsCountOutputType
     */
    select?: StationsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StationsCountOutputType without action
   */
  export type StationsCountOutputTypeCountRechargeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RechargeWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    password: number
    createdAt: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    createdAt?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: Enumerable<UsersOrderByWithAggregationInput>
    by: UsersScalarFieldEnum[]
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: string
    email: string
    password: string
    createdAt: Date
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
    tokens?: boolean | Users$tokensArgs<ExtArgs>
    Recharge?: boolean | Users$RechargeArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    createdAt?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    tokens?: boolean | Users$tokensArgs<ExtArgs>
    Recharge?: boolean | Users$RechargeArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeArgs<ExtArgs>
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersArgs> = $Types.GetResult<UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Users'> extends True ? Prisma__UsersClient<$Types.GetResult<UsersPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UsersClient<$Types.GetResult<UsersPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Types.GetResult<UsersPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Users'> extends True ? Prisma__UsersClient<$Types.GetResult<UsersPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UsersClient<$Types.GetResult<UsersPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Types.GetResult<UsersPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UsersPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Types.GetResult<UsersPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Types.GetResult<UsersPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Types.GetResult<UsersPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Types.GetResult<UsersPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tokens<T extends Users$tokensArgs<ExtArgs> = {}>(args?: Subset<T, Users$tokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<TokensPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Recharge<T extends Users$RechargeArgs<ExtArgs> = {}>(args?: Subset<T, Users$RechargeArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<RechargePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Users base type for findUnique actions
   */
  export type UsersFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUnique
   */
  export interface UsersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UsersFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users base type for findFirst actions
   */
  export type UsersFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * Users findFirst
   */
  export interface UsersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UsersFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UsersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UsersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }


  /**
   * Users.tokens
   */
  export type Users$tokensArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    where?: TokensWhereInput
    orderBy?: Enumerable<TokensOrderByWithRelationInput>
    cursor?: TokensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TokensScalarFieldEnum>
  }


  /**
   * Users.Recharge
   */
  export type Users$RechargeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recharge
     */
    select?: RechargeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeInclude<ExtArgs> | null
    where?: RechargeWhereInput
    orderBy?: Enumerable<RechargeOrderByWithRelationInput>
    cursor?: RechargeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RechargeScalarFieldEnum>
  }


  /**
   * Users without action
   */
  export type UsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
  }



  /**
   * Model Tokens
   */


  export type AggregateTokens = {
    _count: TokensCountAggregateOutputType | null
    _min: TokensMinAggregateOutputType | null
    _max: TokensMaxAggregateOutputType | null
  }

  export type TokensMinAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
  }

  export type TokensMaxAggregateOutputType = {
    id: string | null
    token: string | null
    userId: string | null
  }

  export type TokensCountAggregateOutputType = {
    id: number
    token: number
    userId: number
    _all: number
  }


  export type TokensMinAggregateInputType = {
    id?: true
    token?: true
    userId?: true
  }

  export type TokensMaxAggregateInputType = {
    id?: true
    token?: true
    userId?: true
  }

  export type TokensCountAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    _all?: true
  }

  export type TokensAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to aggregate.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: Enumerable<TokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokensMaxAggregateInputType
  }

  export type GetTokensAggregateType<T extends TokensAggregateArgs> = {
        [P in keyof T & keyof AggregateTokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTokens[P]>
      : GetScalarType<T[P], AggregateTokens[P]>
  }




  export type TokensGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TokensWhereInput
    orderBy?: Enumerable<TokensOrderByWithAggregationInput>
    by: TokensScalarFieldEnum[]
    having?: TokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokensCountAggregateInputType | true
    _min?: TokensMinAggregateInputType
    _max?: TokensMaxAggregateInputType
  }


  export type TokensGroupByOutputType = {
    id: string
    token: string
    userId: string
    _count: TokensCountAggregateOutputType | null
    _min: TokensMinAggregateOutputType | null
    _max: TokensMaxAggregateOutputType | null
  }

  type GetTokensGroupByPayload<T extends TokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokensGroupByOutputType[P]>
            : GetScalarType<T[P], TokensGroupByOutputType[P]>
        }
      >
    >


  export type TokensSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    user?: boolean | UsersArgs<ExtArgs>
  }, ExtArgs["result"]["tokens"]>

  export type TokensSelectScalar = {
    id?: boolean
    token?: boolean
    userId?: boolean
  }

  export type TokensInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UsersArgs<ExtArgs>
  }


  type TokensGetPayload<S extends boolean | null | undefined | TokensArgs> = $Types.GetResult<TokensPayload, S>

  type TokensCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TokensFindManyArgs, 'select' | 'include'> & {
      select?: TokensCountAggregateInputType | true
    }

  export interface TokensDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tokens'], meta: { name: 'Tokens' } }
    /**
     * Find zero or one Tokens that matches the filter.
     * @param {TokensFindUniqueArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TokensFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TokensFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tokens'> extends True ? Prisma__TokensClient<$Types.GetResult<TokensPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__TokensClient<$Types.GetResult<TokensPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Tokens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TokensFindUniqueOrThrowArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TokensFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TokensFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TokensClient<$Types.GetResult<TokensPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensFindFirstArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TokensFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TokensFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tokens'> extends True ? Prisma__TokensClient<$Types.GetResult<TokensPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__TokensClient<$Types.GetResult<TokensPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Tokens that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensFindFirstOrThrowArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TokensFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TokensFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TokensClient<$Types.GetResult<TokensPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.tokens.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.tokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokensWithIdOnly = await prisma.tokens.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TokensFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TokensFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<TokensPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Tokens.
     * @param {TokensCreateArgs} args - Arguments to create a Tokens.
     * @example
     * // Create one Tokens
     * const Tokens = await prisma.tokens.create({
     *   data: {
     *     // ... data to create a Tokens
     *   }
     * })
     * 
    **/
    create<T extends TokensCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TokensCreateArgs<ExtArgs>>
    ): Prisma__TokensClient<$Types.GetResult<TokensPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Tokens.
     *     @param {TokensCreateManyArgs} args - Arguments to create many Tokens.
     *     @example
     *     // Create many Tokens
     *     const tokens = await prisma.tokens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TokensCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TokensCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tokens.
     * @param {TokensDeleteArgs} args - Arguments to delete one Tokens.
     * @example
     * // Delete one Tokens
     * const Tokens = await prisma.tokens.delete({
     *   where: {
     *     // ... filter to delete one Tokens
     *   }
     * })
     * 
    **/
    delete<T extends TokensDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TokensDeleteArgs<ExtArgs>>
    ): Prisma__TokensClient<$Types.GetResult<TokensPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Tokens.
     * @param {TokensUpdateArgs} args - Arguments to update one Tokens.
     * @example
     * // Update one Tokens
     * const tokens = await prisma.tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TokensUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TokensUpdateArgs<ExtArgs>>
    ): Prisma__TokensClient<$Types.GetResult<TokensPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Tokens.
     * @param {TokensDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TokensDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TokensDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const tokens = await prisma.tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TokensUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TokensUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tokens.
     * @param {TokensUpsertArgs} args - Arguments to update or create a Tokens.
     * @example
     * // Update or create a Tokens
     * const tokens = await prisma.tokens.upsert({
     *   create: {
     *     // ... data to create a Tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tokens we want to update
     *   }
     * })
    **/
    upsert<T extends TokensUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TokensUpsertArgs<ExtArgs>>
    ): Prisma__TokensClient<$Types.GetResult<TokensPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.tokens.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokensCountArgs>(
      args?: Subset<T, TokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokensAggregateArgs>(args: Subset<T, TokensAggregateArgs>): Prisma.PrismaPromise<GetTokensAggregateType<T>>

    /**
     * Group by Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokensGroupByArgs['orderBy'] }
        : { orderBy?: TokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TokensClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UsersArgs<ExtArgs> = {}>(args?: Subset<T, UsersArgs<ExtArgs>>): Prisma__UsersClient<$Types.GetResult<UsersPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Tokens base type for findUnique actions
   */
  export type TokensFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where: TokensWhereUniqueInput
  }

  /**
   * Tokens findUnique
   */
  export interface TokensFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TokensFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tokens findUniqueOrThrow
   */
  export type TokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where: TokensWhereUniqueInput
  }


  /**
   * Tokens base type for findFirst actions
   */
  export type TokensFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: Enumerable<TokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: Enumerable<TokensScalarFieldEnum>
  }

  /**
   * Tokens findFirst
   */
  export interface TokensFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TokensFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Tokens findFirstOrThrow
   */
  export type TokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: Enumerable<TokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: Enumerable<TokensScalarFieldEnum>
  }


  /**
   * Tokens findMany
   */
  export type TokensFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: Enumerable<TokensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     */
    cursor?: TokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    distinct?: Enumerable<TokensScalarFieldEnum>
  }


  /**
   * Tokens create
   */
  export type TokensCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * The data needed to create a Tokens.
     */
    data: XOR<TokensCreateInput, TokensUncheckedCreateInput>
  }


  /**
   * Tokens createMany
   */
  export type TokensCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tokens.
     */
    data: Enumerable<TokensCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Tokens update
   */
  export type TokensUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * The data needed to update a Tokens.
     */
    data: XOR<TokensUpdateInput, TokensUncheckedUpdateInput>
    /**
     * Choose, which Tokens to update.
     */
    where: TokensWhereUniqueInput
  }


  /**
   * Tokens updateMany
   */
  export type TokensUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokensUpdateManyMutationInput, TokensUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokensWhereInput
  }


  /**
   * Tokens upsert
   */
  export type TokensUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * The filter to search for the Tokens to update in case it exists.
     */
    where: TokensWhereUniqueInput
    /**
     * In case the Tokens found by the `where` argument doesn't exist, create a new Tokens with this data.
     */
    create: XOR<TokensCreateInput, TokensUncheckedCreateInput>
    /**
     * In case the Tokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokensUpdateInput, TokensUncheckedUpdateInput>
  }


  /**
   * Tokens delete
   */
  export type TokensDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
    /**
     * Filter which Tokens to delete.
     */
    where: TokensWhereUniqueInput
  }


  /**
   * Tokens deleteMany
   */
  export type TokensDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to delete
     */
    where?: TokensWhereInput
  }


  /**
   * Tokens without action
   */
  export type TokensArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tokens
     */
    select?: TokensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TokensInclude<ExtArgs> | null
  }



  /**
   * Model SuitablePlanets
   */


  export type AggregateSuitablePlanets = {
    _count: SuitablePlanetsCountAggregateOutputType | null
    _avg: SuitablePlanetsAvgAggregateOutputType | null
    _sum: SuitablePlanetsSumAggregateOutputType | null
    _min: SuitablePlanetsMinAggregateOutputType | null
    _max: SuitablePlanetsMaxAggregateOutputType | null
  }

  export type SuitablePlanetsAvgAggregateOutputType = {
    mass: number | null
  }

  export type SuitablePlanetsSumAggregateOutputType = {
    mass: number | null
  }

  export type SuitablePlanetsMinAggregateOutputType = {
    id: string | null
    name: string | null
    mass: number | null
    hasStation: boolean | null
  }

  export type SuitablePlanetsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    mass: number | null
    hasStation: boolean | null
  }

  export type SuitablePlanetsCountAggregateOutputType = {
    id: number
    name: number
    mass: number
    hasStation: number
    _all: number
  }


  export type SuitablePlanetsAvgAggregateInputType = {
    mass?: true
  }

  export type SuitablePlanetsSumAggregateInputType = {
    mass?: true
  }

  export type SuitablePlanetsMinAggregateInputType = {
    id?: true
    name?: true
    mass?: true
    hasStation?: true
  }

  export type SuitablePlanetsMaxAggregateInputType = {
    id?: true
    name?: true
    mass?: true
    hasStation?: true
  }

  export type SuitablePlanetsCountAggregateInputType = {
    id?: true
    name?: true
    mass?: true
    hasStation?: true
    _all?: true
  }

  export type SuitablePlanetsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SuitablePlanets to aggregate.
     */
    where?: SuitablePlanetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuitablePlanets to fetch.
     */
    orderBy?: Enumerable<SuitablePlanetsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SuitablePlanetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuitablePlanets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuitablePlanets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SuitablePlanets
    **/
    _count?: true | SuitablePlanetsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SuitablePlanetsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SuitablePlanetsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuitablePlanetsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuitablePlanetsMaxAggregateInputType
  }

  export type GetSuitablePlanetsAggregateType<T extends SuitablePlanetsAggregateArgs> = {
        [P in keyof T & keyof AggregateSuitablePlanets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuitablePlanets[P]>
      : GetScalarType<T[P], AggregateSuitablePlanets[P]>
  }




  export type SuitablePlanetsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SuitablePlanetsWhereInput
    orderBy?: Enumerable<SuitablePlanetsOrderByWithAggregationInput>
    by: SuitablePlanetsScalarFieldEnum[]
    having?: SuitablePlanetsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuitablePlanetsCountAggregateInputType | true
    _avg?: SuitablePlanetsAvgAggregateInputType
    _sum?: SuitablePlanetsSumAggregateInputType
    _min?: SuitablePlanetsMinAggregateInputType
    _max?: SuitablePlanetsMaxAggregateInputType
  }


  export type SuitablePlanetsGroupByOutputType = {
    id: string
    name: string
    mass: number
    hasStation: boolean
    _count: SuitablePlanetsCountAggregateOutputType | null
    _avg: SuitablePlanetsAvgAggregateOutputType | null
    _sum: SuitablePlanetsSumAggregateOutputType | null
    _min: SuitablePlanetsMinAggregateOutputType | null
    _max: SuitablePlanetsMaxAggregateOutputType | null
  }

  type GetSuitablePlanetsGroupByPayload<T extends SuitablePlanetsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SuitablePlanetsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuitablePlanetsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuitablePlanetsGroupByOutputType[P]>
            : GetScalarType<T[P], SuitablePlanetsGroupByOutputType[P]>
        }
      >
    >


  export type SuitablePlanetsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    mass?: boolean
    hasStation?: boolean
    Stations?: boolean | SuitablePlanets$StationsArgs<ExtArgs>
    _count?: boolean | SuitablePlanetsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["suitablePlanets"]>

  export type SuitablePlanetsSelectScalar = {
    id?: boolean
    name?: boolean
    mass?: boolean
    hasStation?: boolean
  }

  export type SuitablePlanetsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Stations?: boolean | SuitablePlanets$StationsArgs<ExtArgs>
    _count?: boolean | SuitablePlanetsCountOutputTypeArgs<ExtArgs>
  }


  type SuitablePlanetsGetPayload<S extends boolean | null | undefined | SuitablePlanetsArgs> = $Types.GetResult<SuitablePlanetsPayload, S>

  type SuitablePlanetsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SuitablePlanetsFindManyArgs, 'select' | 'include'> & {
      select?: SuitablePlanetsCountAggregateInputType | true
    }

  export interface SuitablePlanetsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SuitablePlanets'], meta: { name: 'SuitablePlanets' } }
    /**
     * Find zero or one SuitablePlanets that matches the filter.
     * @param {SuitablePlanetsFindUniqueArgs} args - Arguments to find a SuitablePlanets
     * @example
     * // Get one SuitablePlanets
     * const suitablePlanets = await prisma.suitablePlanets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SuitablePlanetsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SuitablePlanetsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SuitablePlanets'> extends True ? Prisma__SuitablePlanetsClient<$Types.GetResult<SuitablePlanetsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__SuitablePlanetsClient<$Types.GetResult<SuitablePlanetsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one SuitablePlanets that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SuitablePlanetsFindUniqueOrThrowArgs} args - Arguments to find a SuitablePlanets
     * @example
     * // Get one SuitablePlanets
     * const suitablePlanets = await prisma.suitablePlanets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SuitablePlanetsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SuitablePlanetsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SuitablePlanetsClient<$Types.GetResult<SuitablePlanetsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first SuitablePlanets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuitablePlanetsFindFirstArgs} args - Arguments to find a SuitablePlanets
     * @example
     * // Get one SuitablePlanets
     * const suitablePlanets = await prisma.suitablePlanets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SuitablePlanetsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SuitablePlanetsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SuitablePlanets'> extends True ? Prisma__SuitablePlanetsClient<$Types.GetResult<SuitablePlanetsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__SuitablePlanetsClient<$Types.GetResult<SuitablePlanetsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first SuitablePlanets that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuitablePlanetsFindFirstOrThrowArgs} args - Arguments to find a SuitablePlanets
     * @example
     * // Get one SuitablePlanets
     * const suitablePlanets = await prisma.suitablePlanets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SuitablePlanetsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SuitablePlanetsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SuitablePlanetsClient<$Types.GetResult<SuitablePlanetsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more SuitablePlanets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuitablePlanetsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SuitablePlanets
     * const suitablePlanets = await prisma.suitablePlanets.findMany()
     * 
     * // Get first 10 SuitablePlanets
     * const suitablePlanets = await prisma.suitablePlanets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const suitablePlanetsWithIdOnly = await prisma.suitablePlanets.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SuitablePlanetsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SuitablePlanetsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<SuitablePlanetsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a SuitablePlanets.
     * @param {SuitablePlanetsCreateArgs} args - Arguments to create a SuitablePlanets.
     * @example
     * // Create one SuitablePlanets
     * const SuitablePlanets = await prisma.suitablePlanets.create({
     *   data: {
     *     // ... data to create a SuitablePlanets
     *   }
     * })
     * 
    **/
    create<T extends SuitablePlanetsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SuitablePlanetsCreateArgs<ExtArgs>>
    ): Prisma__SuitablePlanetsClient<$Types.GetResult<SuitablePlanetsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many SuitablePlanets.
     *     @param {SuitablePlanetsCreateManyArgs} args - Arguments to create many SuitablePlanets.
     *     @example
     *     // Create many SuitablePlanets
     *     const suitablePlanets = await prisma.suitablePlanets.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SuitablePlanetsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SuitablePlanetsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SuitablePlanets.
     * @param {SuitablePlanetsDeleteArgs} args - Arguments to delete one SuitablePlanets.
     * @example
     * // Delete one SuitablePlanets
     * const SuitablePlanets = await prisma.suitablePlanets.delete({
     *   where: {
     *     // ... filter to delete one SuitablePlanets
     *   }
     * })
     * 
    **/
    delete<T extends SuitablePlanetsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SuitablePlanetsDeleteArgs<ExtArgs>>
    ): Prisma__SuitablePlanetsClient<$Types.GetResult<SuitablePlanetsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one SuitablePlanets.
     * @param {SuitablePlanetsUpdateArgs} args - Arguments to update one SuitablePlanets.
     * @example
     * // Update one SuitablePlanets
     * const suitablePlanets = await prisma.suitablePlanets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SuitablePlanetsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SuitablePlanetsUpdateArgs<ExtArgs>>
    ): Prisma__SuitablePlanetsClient<$Types.GetResult<SuitablePlanetsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more SuitablePlanets.
     * @param {SuitablePlanetsDeleteManyArgs} args - Arguments to filter SuitablePlanets to delete.
     * @example
     * // Delete a few SuitablePlanets
     * const { count } = await prisma.suitablePlanets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SuitablePlanetsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SuitablePlanetsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SuitablePlanets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuitablePlanetsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SuitablePlanets
     * const suitablePlanets = await prisma.suitablePlanets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SuitablePlanetsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SuitablePlanetsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SuitablePlanets.
     * @param {SuitablePlanetsUpsertArgs} args - Arguments to update or create a SuitablePlanets.
     * @example
     * // Update or create a SuitablePlanets
     * const suitablePlanets = await prisma.suitablePlanets.upsert({
     *   create: {
     *     // ... data to create a SuitablePlanets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SuitablePlanets we want to update
     *   }
     * })
    **/
    upsert<T extends SuitablePlanetsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SuitablePlanetsUpsertArgs<ExtArgs>>
    ): Prisma__SuitablePlanetsClient<$Types.GetResult<SuitablePlanetsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of SuitablePlanets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuitablePlanetsCountArgs} args - Arguments to filter SuitablePlanets to count.
     * @example
     * // Count the number of SuitablePlanets
     * const count = await prisma.suitablePlanets.count({
     *   where: {
     *     // ... the filter for the SuitablePlanets we want to count
     *   }
     * })
    **/
    count<T extends SuitablePlanetsCountArgs>(
      args?: Subset<T, SuitablePlanetsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuitablePlanetsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SuitablePlanets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuitablePlanetsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuitablePlanetsAggregateArgs>(args: Subset<T, SuitablePlanetsAggregateArgs>): Prisma.PrismaPromise<GetSuitablePlanetsAggregateType<T>>

    /**
     * Group by SuitablePlanets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuitablePlanetsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SuitablePlanetsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SuitablePlanetsGroupByArgs['orderBy'] }
        : { orderBy?: SuitablePlanetsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SuitablePlanetsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuitablePlanetsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SuitablePlanets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SuitablePlanetsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Stations<T extends SuitablePlanets$StationsArgs<ExtArgs> = {}>(args?: Subset<T, SuitablePlanets$StationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<StationsPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SuitablePlanets base type for findUnique actions
   */
  export type SuitablePlanetsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuitablePlanets
     */
    select?: SuitablePlanetsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuitablePlanetsInclude<ExtArgs> | null
    /**
     * Filter, which SuitablePlanets to fetch.
     */
    where: SuitablePlanetsWhereUniqueInput
  }

  /**
   * SuitablePlanets findUnique
   */
  export interface SuitablePlanetsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SuitablePlanetsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SuitablePlanets findUniqueOrThrow
   */
  export type SuitablePlanetsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuitablePlanets
     */
    select?: SuitablePlanetsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuitablePlanetsInclude<ExtArgs> | null
    /**
     * Filter, which SuitablePlanets to fetch.
     */
    where: SuitablePlanetsWhereUniqueInput
  }


  /**
   * SuitablePlanets base type for findFirst actions
   */
  export type SuitablePlanetsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuitablePlanets
     */
    select?: SuitablePlanetsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuitablePlanetsInclude<ExtArgs> | null
    /**
     * Filter, which SuitablePlanets to fetch.
     */
    where?: SuitablePlanetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuitablePlanets to fetch.
     */
    orderBy?: Enumerable<SuitablePlanetsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SuitablePlanets.
     */
    cursor?: SuitablePlanetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuitablePlanets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuitablePlanets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SuitablePlanets.
     */
    distinct?: Enumerable<SuitablePlanetsScalarFieldEnum>
  }

  /**
   * SuitablePlanets findFirst
   */
  export interface SuitablePlanetsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends SuitablePlanetsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SuitablePlanets findFirstOrThrow
   */
  export type SuitablePlanetsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuitablePlanets
     */
    select?: SuitablePlanetsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuitablePlanetsInclude<ExtArgs> | null
    /**
     * Filter, which SuitablePlanets to fetch.
     */
    where?: SuitablePlanetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuitablePlanets to fetch.
     */
    orderBy?: Enumerable<SuitablePlanetsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SuitablePlanets.
     */
    cursor?: SuitablePlanetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuitablePlanets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuitablePlanets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SuitablePlanets.
     */
    distinct?: Enumerable<SuitablePlanetsScalarFieldEnum>
  }


  /**
   * SuitablePlanets findMany
   */
  export type SuitablePlanetsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuitablePlanets
     */
    select?: SuitablePlanetsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuitablePlanetsInclude<ExtArgs> | null
    /**
     * Filter, which SuitablePlanets to fetch.
     */
    where?: SuitablePlanetsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SuitablePlanets to fetch.
     */
    orderBy?: Enumerable<SuitablePlanetsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SuitablePlanets.
     */
    cursor?: SuitablePlanetsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SuitablePlanets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SuitablePlanets.
     */
    skip?: number
    distinct?: Enumerable<SuitablePlanetsScalarFieldEnum>
  }


  /**
   * SuitablePlanets create
   */
  export type SuitablePlanetsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuitablePlanets
     */
    select?: SuitablePlanetsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuitablePlanetsInclude<ExtArgs> | null
    /**
     * The data needed to create a SuitablePlanets.
     */
    data: XOR<SuitablePlanetsCreateInput, SuitablePlanetsUncheckedCreateInput>
  }


  /**
   * SuitablePlanets createMany
   */
  export type SuitablePlanetsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SuitablePlanets.
     */
    data: Enumerable<SuitablePlanetsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SuitablePlanets update
   */
  export type SuitablePlanetsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuitablePlanets
     */
    select?: SuitablePlanetsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuitablePlanetsInclude<ExtArgs> | null
    /**
     * The data needed to update a SuitablePlanets.
     */
    data: XOR<SuitablePlanetsUpdateInput, SuitablePlanetsUncheckedUpdateInput>
    /**
     * Choose, which SuitablePlanets to update.
     */
    where: SuitablePlanetsWhereUniqueInput
  }


  /**
   * SuitablePlanets updateMany
   */
  export type SuitablePlanetsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SuitablePlanets.
     */
    data: XOR<SuitablePlanetsUpdateManyMutationInput, SuitablePlanetsUncheckedUpdateManyInput>
    /**
     * Filter which SuitablePlanets to update
     */
    where?: SuitablePlanetsWhereInput
  }


  /**
   * SuitablePlanets upsert
   */
  export type SuitablePlanetsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuitablePlanets
     */
    select?: SuitablePlanetsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuitablePlanetsInclude<ExtArgs> | null
    /**
     * The filter to search for the SuitablePlanets to update in case it exists.
     */
    where: SuitablePlanetsWhereUniqueInput
    /**
     * In case the SuitablePlanets found by the `where` argument doesn't exist, create a new SuitablePlanets with this data.
     */
    create: XOR<SuitablePlanetsCreateInput, SuitablePlanetsUncheckedCreateInput>
    /**
     * In case the SuitablePlanets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SuitablePlanetsUpdateInput, SuitablePlanetsUncheckedUpdateInput>
  }


  /**
   * SuitablePlanets delete
   */
  export type SuitablePlanetsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuitablePlanets
     */
    select?: SuitablePlanetsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuitablePlanetsInclude<ExtArgs> | null
    /**
     * Filter which SuitablePlanets to delete.
     */
    where: SuitablePlanetsWhereUniqueInput
  }


  /**
   * SuitablePlanets deleteMany
   */
  export type SuitablePlanetsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SuitablePlanets to delete
     */
    where?: SuitablePlanetsWhereInput
  }


  /**
   * SuitablePlanets.Stations
   */
  export type SuitablePlanets$StationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stations
     */
    select?: StationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationsInclude<ExtArgs> | null
    where?: StationsWhereInput
    orderBy?: Enumerable<StationsOrderByWithRelationInput>
    cursor?: StationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<StationsScalarFieldEnum>
  }


  /**
   * SuitablePlanets without action
   */
  export type SuitablePlanetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SuitablePlanets
     */
    select?: SuitablePlanetsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SuitablePlanetsInclude<ExtArgs> | null
  }



  /**
   * Model Stations
   */


  export type AggregateStations = {
    _count: StationsCountAggregateOutputType | null
    _min: StationsMinAggregateOutputType | null
    _max: StationsMaxAggregateOutputType | null
  }

  export type StationsMinAggregateOutputType = {
    id: string | null
    planetId: string | null
  }

  export type StationsMaxAggregateOutputType = {
    id: string | null
    planetId: string | null
  }

  export type StationsCountAggregateOutputType = {
    id: number
    planetId: number
    _all: number
  }


  export type StationsMinAggregateInputType = {
    id?: true
    planetId?: true
  }

  export type StationsMaxAggregateInputType = {
    id?: true
    planetId?: true
  }

  export type StationsCountAggregateInputType = {
    id?: true
    planetId?: true
    _all?: true
  }

  export type StationsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stations to aggregate.
     */
    where?: StationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: Enumerable<StationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stations
    **/
    _count?: true | StationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StationsMaxAggregateInputType
  }

  export type GetStationsAggregateType<T extends StationsAggregateArgs> = {
        [P in keyof T & keyof AggregateStations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStations[P]>
      : GetScalarType<T[P], AggregateStations[P]>
  }




  export type StationsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: StationsWhereInput
    orderBy?: Enumerable<StationsOrderByWithAggregationInput>
    by: StationsScalarFieldEnum[]
    having?: StationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StationsCountAggregateInputType | true
    _min?: StationsMinAggregateInputType
    _max?: StationsMaxAggregateInputType
  }


  export type StationsGroupByOutputType = {
    id: string
    planetId: string
    _count: StationsCountAggregateOutputType | null
    _min: StationsMinAggregateOutputType | null
    _max: StationsMaxAggregateOutputType | null
  }

  type GetStationsGroupByPayload<T extends StationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<StationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StationsGroupByOutputType[P]>
            : GetScalarType<T[P], StationsGroupByOutputType[P]>
        }
      >
    >


  export type StationsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planetId?: boolean
    suitablePlanets?: boolean | SuitablePlanetsArgs<ExtArgs>
    Recharge?: boolean | Stations$RechargeArgs<ExtArgs>
    _count?: boolean | StationsCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["stations"]>

  export type StationsSelectScalar = {
    id?: boolean
    planetId?: boolean
  }

  export type StationsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    suitablePlanets?: boolean | SuitablePlanetsArgs<ExtArgs>
    Recharge?: boolean | Stations$RechargeArgs<ExtArgs>
    _count?: boolean | StationsCountOutputTypeArgs<ExtArgs>
  }


  type StationsGetPayload<S extends boolean | null | undefined | StationsArgs> = $Types.GetResult<StationsPayload, S>

  type StationsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<StationsFindManyArgs, 'select' | 'include'> & {
      select?: StationsCountAggregateInputType | true
    }

  export interface StationsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stations'], meta: { name: 'Stations' } }
    /**
     * Find zero or one Stations that matches the filter.
     * @param {StationsFindUniqueArgs} args - Arguments to find a Stations
     * @example
     * // Get one Stations
     * const stations = await prisma.stations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StationsFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StationsFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Stations'> extends True ? Prisma__StationsClient<$Types.GetResult<StationsPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__StationsClient<$Types.GetResult<StationsPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Stations that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StationsFindUniqueOrThrowArgs} args - Arguments to find a Stations
     * @example
     * // Get one Stations
     * const stations = await prisma.stations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StationsClient<$Types.GetResult<StationsPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Stations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationsFindFirstArgs} args - Arguments to find a Stations
     * @example
     * // Get one Stations
     * const stations = await prisma.stations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StationsFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StationsFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Stations'> extends True ? Prisma__StationsClient<$Types.GetResult<StationsPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__StationsClient<$Types.GetResult<StationsPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Stations that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationsFindFirstOrThrowArgs} args - Arguments to find a Stations
     * @example
     * // Get one Stations
     * const stations = await prisma.stations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StationsClient<$Types.GetResult<StationsPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Stations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stations
     * const stations = await prisma.stations.findMany()
     * 
     * // Get first 10 Stations
     * const stations = await prisma.stations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stationsWithIdOnly = await prisma.stations.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<StationsPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Stations.
     * @param {StationsCreateArgs} args - Arguments to create a Stations.
     * @example
     * // Create one Stations
     * const Stations = await prisma.stations.create({
     *   data: {
     *     // ... data to create a Stations
     *   }
     * })
     * 
    **/
    create<T extends StationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StationsCreateArgs<ExtArgs>>
    ): Prisma__StationsClient<$Types.GetResult<StationsPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Stations.
     *     @param {StationsCreateManyArgs} args - Arguments to create many Stations.
     *     @example
     *     // Create many Stations
     *     const stations = await prisma.stations.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Stations.
     * @param {StationsDeleteArgs} args - Arguments to delete one Stations.
     * @example
     * // Delete one Stations
     * const Stations = await prisma.stations.delete({
     *   where: {
     *     // ... filter to delete one Stations
     *   }
     * })
     * 
    **/
    delete<T extends StationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StationsDeleteArgs<ExtArgs>>
    ): Prisma__StationsClient<$Types.GetResult<StationsPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Stations.
     * @param {StationsUpdateArgs} args - Arguments to update one Stations.
     * @example
     * // Update one Stations
     * const stations = await prisma.stations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StationsUpdateArgs<ExtArgs>>
    ): Prisma__StationsClient<$Types.GetResult<StationsPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Stations.
     * @param {StationsDeleteManyArgs} args - Arguments to filter Stations to delete.
     * @example
     * // Delete a few Stations
     * const { count } = await prisma.stations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stations
     * const stations = await prisma.stations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Stations.
     * @param {StationsUpsertArgs} args - Arguments to update or create a Stations.
     * @example
     * // Update or create a Stations
     * const stations = await prisma.stations.upsert({
     *   create: {
     *     // ... data to create a Stations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stations we want to update
     *   }
     * })
    **/
    upsert<T extends StationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StationsUpsertArgs<ExtArgs>>
    ): Prisma__StationsClient<$Types.GetResult<StationsPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Stations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationsCountArgs} args - Arguments to filter Stations to count.
     * @example
     * // Count the number of Stations
     * const count = await prisma.stations.count({
     *   where: {
     *     // ... the filter for the Stations we want to count
     *   }
     * })
    **/
    count<T extends StationsCountArgs>(
      args?: Subset<T, StationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StationsAggregateArgs>(args: Subset<T, StationsAggregateArgs>): Prisma.PrismaPromise<GetStationsAggregateType<T>>

    /**
     * Group by Stations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StationsGroupByArgs['orderBy'] }
        : { orderBy?: StationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Stations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StationsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    suitablePlanets<T extends SuitablePlanetsArgs<ExtArgs> = {}>(args?: Subset<T, SuitablePlanetsArgs<ExtArgs>>): Prisma__SuitablePlanetsClient<$Types.GetResult<SuitablePlanetsPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Recharge<T extends Stations$RechargeArgs<ExtArgs> = {}>(args?: Subset<T, Stations$RechargeArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<RechargePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Stations base type for findUnique actions
   */
  export type StationsFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stations
     */
    select?: StationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationsInclude<ExtArgs> | null
    /**
     * Filter, which Stations to fetch.
     */
    where: StationsWhereUniqueInput
  }

  /**
   * Stations findUnique
   */
  export interface StationsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends StationsFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Stations findUniqueOrThrow
   */
  export type StationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stations
     */
    select?: StationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationsInclude<ExtArgs> | null
    /**
     * Filter, which Stations to fetch.
     */
    where: StationsWhereUniqueInput
  }


  /**
   * Stations base type for findFirst actions
   */
  export type StationsFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stations
     */
    select?: StationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationsInclude<ExtArgs> | null
    /**
     * Filter, which Stations to fetch.
     */
    where?: StationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: Enumerable<StationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stations.
     */
    cursor?: StationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stations.
     */
    distinct?: Enumerable<StationsScalarFieldEnum>
  }

  /**
   * Stations findFirst
   */
  export interface StationsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends StationsFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Stations findFirstOrThrow
   */
  export type StationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stations
     */
    select?: StationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationsInclude<ExtArgs> | null
    /**
     * Filter, which Stations to fetch.
     */
    where?: StationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: Enumerable<StationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stations.
     */
    cursor?: StationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stations.
     */
    distinct?: Enumerable<StationsScalarFieldEnum>
  }


  /**
   * Stations findMany
   */
  export type StationsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stations
     */
    select?: StationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationsInclude<ExtArgs> | null
    /**
     * Filter, which Stations to fetch.
     */
    where?: StationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stations to fetch.
     */
    orderBy?: Enumerable<StationsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stations.
     */
    cursor?: StationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stations.
     */
    skip?: number
    distinct?: Enumerable<StationsScalarFieldEnum>
  }


  /**
   * Stations create
   */
  export type StationsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stations
     */
    select?: StationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationsInclude<ExtArgs> | null
    /**
     * The data needed to create a Stations.
     */
    data: XOR<StationsCreateInput, StationsUncheckedCreateInput>
  }


  /**
   * Stations createMany
   */
  export type StationsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stations.
     */
    data: Enumerable<StationsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Stations update
   */
  export type StationsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stations
     */
    select?: StationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationsInclude<ExtArgs> | null
    /**
     * The data needed to update a Stations.
     */
    data: XOR<StationsUpdateInput, StationsUncheckedUpdateInput>
    /**
     * Choose, which Stations to update.
     */
    where: StationsWhereUniqueInput
  }


  /**
   * Stations updateMany
   */
  export type StationsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stations.
     */
    data: XOR<StationsUpdateManyMutationInput, StationsUncheckedUpdateManyInput>
    /**
     * Filter which Stations to update
     */
    where?: StationsWhereInput
  }


  /**
   * Stations upsert
   */
  export type StationsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stations
     */
    select?: StationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationsInclude<ExtArgs> | null
    /**
     * The filter to search for the Stations to update in case it exists.
     */
    where: StationsWhereUniqueInput
    /**
     * In case the Stations found by the `where` argument doesn't exist, create a new Stations with this data.
     */
    create: XOR<StationsCreateInput, StationsUncheckedCreateInput>
    /**
     * In case the Stations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StationsUpdateInput, StationsUncheckedUpdateInput>
  }


  /**
   * Stations delete
   */
  export type StationsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stations
     */
    select?: StationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationsInclude<ExtArgs> | null
    /**
     * Filter which Stations to delete.
     */
    where: StationsWhereUniqueInput
  }


  /**
   * Stations deleteMany
   */
  export type StationsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stations to delete
     */
    where?: StationsWhereInput
  }


  /**
   * Stations.Recharge
   */
  export type Stations$RechargeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recharge
     */
    select?: RechargeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeInclude<ExtArgs> | null
    where?: RechargeWhereInput
    orderBy?: Enumerable<RechargeOrderByWithRelationInput>
    cursor?: RechargeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RechargeScalarFieldEnum>
  }


  /**
   * Stations without action
   */
  export type StationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stations
     */
    select?: StationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StationsInclude<ExtArgs> | null
  }



  /**
   * Model Recharge
   */


  export type AggregateRecharge = {
    _count: RechargeCountAggregateOutputType | null
    _min: RechargeMinAggregateOutputType | null
    _max: RechargeMaxAggregateOutputType | null
  }

  export type RechargeMinAggregateOutputType = {
    id: string | null
    start: Date | null
    end: Date | null
    reservation: boolean | null
    status: string | null
    userId: string | null
    stationId: string | null
    updatedAt: Date | null
  }

  export type RechargeMaxAggregateOutputType = {
    id: string | null
    start: Date | null
    end: Date | null
    reservation: boolean | null
    status: string | null
    userId: string | null
    stationId: string | null
    updatedAt: Date | null
  }

  export type RechargeCountAggregateOutputType = {
    id: number
    start: number
    end: number
    reservation: number
    status: number
    userId: number
    stationId: number
    updatedAt: number
    _all: number
  }


  export type RechargeMinAggregateInputType = {
    id?: true
    start?: true
    end?: true
    reservation?: true
    status?: true
    userId?: true
    stationId?: true
    updatedAt?: true
  }

  export type RechargeMaxAggregateInputType = {
    id?: true
    start?: true
    end?: true
    reservation?: true
    status?: true
    userId?: true
    stationId?: true
    updatedAt?: true
  }

  export type RechargeCountAggregateInputType = {
    id?: true
    start?: true
    end?: true
    reservation?: true
    status?: true
    userId?: true
    stationId?: true
    updatedAt?: true
    _all?: true
  }

  export type RechargeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recharge to aggregate.
     */
    where?: RechargeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recharges to fetch.
     */
    orderBy?: Enumerable<RechargeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RechargeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recharges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recharges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recharges
    **/
    _count?: true | RechargeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RechargeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RechargeMaxAggregateInputType
  }

  export type GetRechargeAggregateType<T extends RechargeAggregateArgs> = {
        [P in keyof T & keyof AggregateRecharge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecharge[P]>
      : GetScalarType<T[P], AggregateRecharge[P]>
  }




  export type RechargeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RechargeWhereInput
    orderBy?: Enumerable<RechargeOrderByWithAggregationInput>
    by: RechargeScalarFieldEnum[]
    having?: RechargeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RechargeCountAggregateInputType | true
    _min?: RechargeMinAggregateInputType
    _max?: RechargeMaxAggregateInputType
  }


  export type RechargeGroupByOutputType = {
    id: string
    start: Date
    end: Date
    reservation: boolean
    status: string
    userId: string
    stationId: string
    updatedAt: Date
    _count: RechargeCountAggregateOutputType | null
    _min: RechargeMinAggregateOutputType | null
    _max: RechargeMaxAggregateOutputType | null
  }

  type GetRechargeGroupByPayload<T extends RechargeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RechargeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RechargeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RechargeGroupByOutputType[P]>
            : GetScalarType<T[P], RechargeGroupByOutputType[P]>
        }
      >
    >


  export type RechargeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    start?: boolean
    end?: boolean
    reservation?: boolean
    status?: boolean
    userId?: boolean
    stationId?: boolean
    updatedAt?: boolean
    user?: boolean | UsersArgs<ExtArgs>
    stations?: boolean | StationsArgs<ExtArgs>
  }, ExtArgs["result"]["recharge"]>

  export type RechargeSelectScalar = {
    id?: boolean
    start?: boolean
    end?: boolean
    reservation?: boolean
    status?: boolean
    userId?: boolean
    stationId?: boolean
    updatedAt?: boolean
  }

  export type RechargeInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UsersArgs<ExtArgs>
    stations?: boolean | StationsArgs<ExtArgs>
  }


  type RechargeGetPayload<S extends boolean | null | undefined | RechargeArgs> = $Types.GetResult<RechargePayload, S>

  type RechargeCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RechargeFindManyArgs, 'select' | 'include'> & {
      select?: RechargeCountAggregateInputType | true
    }

  export interface RechargeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recharge'], meta: { name: 'Recharge' } }
    /**
     * Find zero or one Recharge that matches the filter.
     * @param {RechargeFindUniqueArgs} args - Arguments to find a Recharge
     * @example
     * // Get one Recharge
     * const recharge = await prisma.recharge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RechargeFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RechargeFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Recharge'> extends True ? Prisma__RechargeClient<$Types.GetResult<RechargePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__RechargeClient<$Types.GetResult<RechargePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Recharge that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RechargeFindUniqueOrThrowArgs} args - Arguments to find a Recharge
     * @example
     * // Get one Recharge
     * const recharge = await prisma.recharge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RechargeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RechargeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RechargeClient<$Types.GetResult<RechargePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Recharge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RechargeFindFirstArgs} args - Arguments to find a Recharge
     * @example
     * // Get one Recharge
     * const recharge = await prisma.recharge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RechargeFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RechargeFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Recharge'> extends True ? Prisma__RechargeClient<$Types.GetResult<RechargePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__RechargeClient<$Types.GetResult<RechargePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Recharge that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RechargeFindFirstOrThrowArgs} args - Arguments to find a Recharge
     * @example
     * // Get one Recharge
     * const recharge = await prisma.recharge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RechargeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RechargeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RechargeClient<$Types.GetResult<RechargePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Recharges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RechargeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recharges
     * const recharges = await prisma.recharge.findMany()
     * 
     * // Get first 10 Recharges
     * const recharges = await prisma.recharge.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rechargeWithIdOnly = await prisma.recharge.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RechargeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RechargeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<RechargePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Recharge.
     * @param {RechargeCreateArgs} args - Arguments to create a Recharge.
     * @example
     * // Create one Recharge
     * const Recharge = await prisma.recharge.create({
     *   data: {
     *     // ... data to create a Recharge
     *   }
     * })
     * 
    **/
    create<T extends RechargeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RechargeCreateArgs<ExtArgs>>
    ): Prisma__RechargeClient<$Types.GetResult<RechargePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Recharges.
     *     @param {RechargeCreateManyArgs} args - Arguments to create many Recharges.
     *     @example
     *     // Create many Recharges
     *     const recharge = await prisma.recharge.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RechargeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RechargeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recharge.
     * @param {RechargeDeleteArgs} args - Arguments to delete one Recharge.
     * @example
     * // Delete one Recharge
     * const Recharge = await prisma.recharge.delete({
     *   where: {
     *     // ... filter to delete one Recharge
     *   }
     * })
     * 
    **/
    delete<T extends RechargeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RechargeDeleteArgs<ExtArgs>>
    ): Prisma__RechargeClient<$Types.GetResult<RechargePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Recharge.
     * @param {RechargeUpdateArgs} args - Arguments to update one Recharge.
     * @example
     * // Update one Recharge
     * const recharge = await prisma.recharge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RechargeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RechargeUpdateArgs<ExtArgs>>
    ): Prisma__RechargeClient<$Types.GetResult<RechargePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Recharges.
     * @param {RechargeDeleteManyArgs} args - Arguments to filter Recharges to delete.
     * @example
     * // Delete a few Recharges
     * const { count } = await prisma.recharge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RechargeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RechargeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recharges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RechargeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recharges
     * const recharge = await prisma.recharge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RechargeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RechargeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recharge.
     * @param {RechargeUpsertArgs} args - Arguments to update or create a Recharge.
     * @example
     * // Update or create a Recharge
     * const recharge = await prisma.recharge.upsert({
     *   create: {
     *     // ... data to create a Recharge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recharge we want to update
     *   }
     * })
    **/
    upsert<T extends RechargeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RechargeUpsertArgs<ExtArgs>>
    ): Prisma__RechargeClient<$Types.GetResult<RechargePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Recharges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RechargeCountArgs} args - Arguments to filter Recharges to count.
     * @example
     * // Count the number of Recharges
     * const count = await prisma.recharge.count({
     *   where: {
     *     // ... the filter for the Recharges we want to count
     *   }
     * })
    **/
    count<T extends RechargeCountArgs>(
      args?: Subset<T, RechargeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RechargeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recharge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RechargeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RechargeAggregateArgs>(args: Subset<T, RechargeAggregateArgs>): Prisma.PrismaPromise<GetRechargeAggregateType<T>>

    /**
     * Group by Recharge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RechargeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RechargeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RechargeGroupByArgs['orderBy'] }
        : { orderBy?: RechargeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RechargeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRechargeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Recharge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RechargeClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UsersArgs<ExtArgs> = {}>(args?: Subset<T, UsersArgs<ExtArgs>>): Prisma__UsersClient<$Types.GetResult<UsersPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    stations<T extends StationsArgs<ExtArgs> = {}>(args?: Subset<T, StationsArgs<ExtArgs>>): Prisma__StationsClient<$Types.GetResult<StationsPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Recharge base type for findUnique actions
   */
  export type RechargeFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recharge
     */
    select?: RechargeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeInclude<ExtArgs> | null
    /**
     * Filter, which Recharge to fetch.
     */
    where: RechargeWhereUniqueInput
  }

  /**
   * Recharge findUnique
   */
  export interface RechargeFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RechargeFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Recharge findUniqueOrThrow
   */
  export type RechargeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recharge
     */
    select?: RechargeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeInclude<ExtArgs> | null
    /**
     * Filter, which Recharge to fetch.
     */
    where: RechargeWhereUniqueInput
  }


  /**
   * Recharge base type for findFirst actions
   */
  export type RechargeFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recharge
     */
    select?: RechargeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeInclude<ExtArgs> | null
    /**
     * Filter, which Recharge to fetch.
     */
    where?: RechargeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recharges to fetch.
     */
    orderBy?: Enumerable<RechargeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recharges.
     */
    cursor?: RechargeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recharges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recharges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recharges.
     */
    distinct?: Enumerable<RechargeScalarFieldEnum>
  }

  /**
   * Recharge findFirst
   */
  export interface RechargeFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RechargeFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Recharge findFirstOrThrow
   */
  export type RechargeFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recharge
     */
    select?: RechargeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeInclude<ExtArgs> | null
    /**
     * Filter, which Recharge to fetch.
     */
    where?: RechargeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recharges to fetch.
     */
    orderBy?: Enumerable<RechargeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recharges.
     */
    cursor?: RechargeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recharges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recharges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recharges.
     */
    distinct?: Enumerable<RechargeScalarFieldEnum>
  }


  /**
   * Recharge findMany
   */
  export type RechargeFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recharge
     */
    select?: RechargeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeInclude<ExtArgs> | null
    /**
     * Filter, which Recharges to fetch.
     */
    where?: RechargeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recharges to fetch.
     */
    orderBy?: Enumerable<RechargeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recharges.
     */
    cursor?: RechargeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recharges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recharges.
     */
    skip?: number
    distinct?: Enumerable<RechargeScalarFieldEnum>
  }


  /**
   * Recharge create
   */
  export type RechargeCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recharge
     */
    select?: RechargeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeInclude<ExtArgs> | null
    /**
     * The data needed to create a Recharge.
     */
    data: XOR<RechargeCreateInput, RechargeUncheckedCreateInput>
  }


  /**
   * Recharge createMany
   */
  export type RechargeCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recharges.
     */
    data: Enumerable<RechargeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Recharge update
   */
  export type RechargeUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recharge
     */
    select?: RechargeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeInclude<ExtArgs> | null
    /**
     * The data needed to update a Recharge.
     */
    data: XOR<RechargeUpdateInput, RechargeUncheckedUpdateInput>
    /**
     * Choose, which Recharge to update.
     */
    where: RechargeWhereUniqueInput
  }


  /**
   * Recharge updateMany
   */
  export type RechargeUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recharges.
     */
    data: XOR<RechargeUpdateManyMutationInput, RechargeUncheckedUpdateManyInput>
    /**
     * Filter which Recharges to update
     */
    where?: RechargeWhereInput
  }


  /**
   * Recharge upsert
   */
  export type RechargeUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recharge
     */
    select?: RechargeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeInclude<ExtArgs> | null
    /**
     * The filter to search for the Recharge to update in case it exists.
     */
    where: RechargeWhereUniqueInput
    /**
     * In case the Recharge found by the `where` argument doesn't exist, create a new Recharge with this data.
     */
    create: XOR<RechargeCreateInput, RechargeUncheckedCreateInput>
    /**
     * In case the Recharge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RechargeUpdateInput, RechargeUncheckedUpdateInput>
  }


  /**
   * Recharge delete
   */
  export type RechargeDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recharge
     */
    select?: RechargeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeInclude<ExtArgs> | null
    /**
     * Filter which Recharge to delete.
     */
    where: RechargeWhereUniqueInput
  }


  /**
   * Recharge deleteMany
   */
  export type RechargeDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recharges to delete
     */
    where?: RechargeWhereInput
  }


  /**
   * Recharge without action
   */
  export type RechargeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recharge
     */
    select?: RechargeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RechargeInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const TokensScalarFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId'
  };

  export type TokensScalarFieldEnum = (typeof TokensScalarFieldEnum)[keyof typeof TokensScalarFieldEnum]


  export const SuitablePlanetsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    mass: 'mass',
    hasStation: 'hasStation'
  };

  export type SuitablePlanetsScalarFieldEnum = (typeof SuitablePlanetsScalarFieldEnum)[keyof typeof SuitablePlanetsScalarFieldEnum]


  export const StationsScalarFieldEnum: {
    id: 'id',
    planetId: 'planetId'
  };

  export type StationsScalarFieldEnum = (typeof StationsScalarFieldEnum)[keyof typeof StationsScalarFieldEnum]


  export const RechargeScalarFieldEnum: {
    id: 'id',
    start: 'start',
    end: 'end',
    reservation: 'reservation',
    status: 'status',
    userId: 'userId',
    stationId: 'stationId',
    updatedAt: 'updatedAt'
  };

  export type RechargeScalarFieldEnum = (typeof RechargeScalarFieldEnum)[keyof typeof RechargeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: Enumerable<UsersWhereInput>
    OR?: Enumerable<UsersWhereInput>
    NOT?: Enumerable<UsersWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    tokens?: TokensListRelationFilter
    Recharge?: RechargeListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    tokens?: TokensOrderByRelationAggregateInput
    Recharge?: RechargeOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsersScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsersScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TokensWhereInput = {
    AND?: Enumerable<TokensWhereInput>
    OR?: Enumerable<TokensWhereInput>
    NOT?: Enumerable<TokensWhereInput>
    id?: StringFilter | string
    token?: StringFilter | string
    userId?: StringFilter | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type TokensOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type TokensWhereUniqueInput = {
    id?: string
    token?: string
  }

  export type TokensOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    _count?: TokensCountOrderByAggregateInput
    _max?: TokensMaxOrderByAggregateInput
    _min?: TokensMinOrderByAggregateInput
  }

  export type TokensScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TokensScalarWhereWithAggregatesInput>
    OR?: Enumerable<TokensScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TokensScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    token?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
  }

  export type SuitablePlanetsWhereInput = {
    AND?: Enumerable<SuitablePlanetsWhereInput>
    OR?: Enumerable<SuitablePlanetsWhereInput>
    NOT?: Enumerable<SuitablePlanetsWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    mass?: FloatFilter | number
    hasStation?: BoolFilter | boolean
    Stations?: StationsListRelationFilter
  }

  export type SuitablePlanetsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    hasStation?: SortOrder
    Stations?: StationsOrderByRelationAggregateInput
  }

  export type SuitablePlanetsWhereUniqueInput = {
    id?: string
  }

  export type SuitablePlanetsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    hasStation?: SortOrder
    _count?: SuitablePlanetsCountOrderByAggregateInput
    _avg?: SuitablePlanetsAvgOrderByAggregateInput
    _max?: SuitablePlanetsMaxOrderByAggregateInput
    _min?: SuitablePlanetsMinOrderByAggregateInput
    _sum?: SuitablePlanetsSumOrderByAggregateInput
  }

  export type SuitablePlanetsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SuitablePlanetsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SuitablePlanetsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SuitablePlanetsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    mass?: FloatWithAggregatesFilter | number
    hasStation?: BoolWithAggregatesFilter | boolean
  }

  export type StationsWhereInput = {
    AND?: Enumerable<StationsWhereInput>
    OR?: Enumerable<StationsWhereInput>
    NOT?: Enumerable<StationsWhereInput>
    id?: StringFilter | string
    planetId?: StringFilter | string
    suitablePlanets?: XOR<SuitablePlanetsRelationFilter, SuitablePlanetsWhereInput>
    Recharge?: RechargeListRelationFilter
  }

  export type StationsOrderByWithRelationInput = {
    id?: SortOrder
    planetId?: SortOrder
    suitablePlanets?: SuitablePlanetsOrderByWithRelationInput
    Recharge?: RechargeOrderByRelationAggregateInput
  }

  export type StationsWhereUniqueInput = {
    id?: string
  }

  export type StationsOrderByWithAggregationInput = {
    id?: SortOrder
    planetId?: SortOrder
    _count?: StationsCountOrderByAggregateInput
    _max?: StationsMaxOrderByAggregateInput
    _min?: StationsMinOrderByAggregateInput
  }

  export type StationsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StationsScalarWhereWithAggregatesInput>
    OR?: Enumerable<StationsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StationsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    planetId?: StringWithAggregatesFilter | string
  }

  export type RechargeWhereInput = {
    AND?: Enumerable<RechargeWhereInput>
    OR?: Enumerable<RechargeWhereInput>
    NOT?: Enumerable<RechargeWhereInput>
    id?: StringFilter | string
    start?: DateTimeFilter | Date | string
    end?: DateTimeFilter | Date | string
    reservation?: BoolFilter | boolean
    status?: StringFilter | string
    userId?: StringFilter | string
    stationId?: StringFilter | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
    stations?: XOR<StationsRelationFilter, StationsWhereInput>
  }

  export type RechargeOrderByWithRelationInput = {
    id?: SortOrder
    start?: SortOrder
    end?: SortOrder
    reservation?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    updatedAt?: SortOrder
    user?: UsersOrderByWithRelationInput
    stations?: StationsOrderByWithRelationInput
  }

  export type RechargeWhereUniqueInput = {
    id?: string
  }

  export type RechargeOrderByWithAggregationInput = {
    id?: SortOrder
    start?: SortOrder
    end?: SortOrder
    reservation?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    updatedAt?: SortOrder
    _count?: RechargeCountOrderByAggregateInput
    _max?: RechargeMaxOrderByAggregateInput
    _min?: RechargeMinOrderByAggregateInput
  }

  export type RechargeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RechargeScalarWhereWithAggregatesInput>
    OR?: Enumerable<RechargeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RechargeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    start?: DateTimeWithAggregatesFilter | Date | string
    end?: DateTimeWithAggregatesFilter | Date | string
    reservation?: BoolWithAggregatesFilter | boolean
    status?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
    stationId?: StringWithAggregatesFilter | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UsersCreateInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    tokens?: TokensCreateNestedManyWithoutUserInput
    Recharge?: RechargeCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    tokens?: TokensUncheckedCreateNestedManyWithoutUserInput
    Recharge?: RechargeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokensUpdateManyWithoutUserNestedInput
    Recharge?: RechargeUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokensUncheckedUpdateManyWithoutUserNestedInput
    Recharge?: RechargeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
  }

  export type UsersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokensCreateInput = {
    id?: string
    token: string
    user: UsersCreateNestedOneWithoutTokensInput
  }

  export type TokensUncheckedCreateInput = {
    id?: string
    token: string
    userId: string
  }

  export type TokensUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutTokensNestedInput
  }

  export type TokensUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TokensCreateManyInput = {
    id?: string
    token: string
    userId: string
  }

  export type TokensUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type TokensUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SuitablePlanetsCreateInput = {
    id?: string
    name: string
    mass: number
    hasStation: boolean
    Stations?: StationsCreateNestedManyWithoutSuitablePlanetsInput
  }

  export type SuitablePlanetsUncheckedCreateInput = {
    id?: string
    name: string
    mass: number
    hasStation: boolean
    Stations?: StationsUncheckedCreateNestedManyWithoutSuitablePlanetsInput
  }

  export type SuitablePlanetsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mass?: FloatFieldUpdateOperationsInput | number
    hasStation?: BoolFieldUpdateOperationsInput | boolean
    Stations?: StationsUpdateManyWithoutSuitablePlanetsNestedInput
  }

  export type SuitablePlanetsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mass?: FloatFieldUpdateOperationsInput | number
    hasStation?: BoolFieldUpdateOperationsInput | boolean
    Stations?: StationsUncheckedUpdateManyWithoutSuitablePlanetsNestedInput
  }

  export type SuitablePlanetsCreateManyInput = {
    id?: string
    name: string
    mass: number
    hasStation: boolean
  }

  export type SuitablePlanetsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mass?: FloatFieldUpdateOperationsInput | number
    hasStation?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SuitablePlanetsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mass?: FloatFieldUpdateOperationsInput | number
    hasStation?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StationsCreateInput = {
    id?: string
    suitablePlanets: SuitablePlanetsCreateNestedOneWithoutStationsInput
    Recharge?: RechargeCreateNestedManyWithoutStationsInput
  }

  export type StationsUncheckedCreateInput = {
    id?: string
    planetId: string
    Recharge?: RechargeUncheckedCreateNestedManyWithoutStationsInput
  }

  export type StationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    suitablePlanets?: SuitablePlanetsUpdateOneRequiredWithoutStationsNestedInput
    Recharge?: RechargeUpdateManyWithoutStationsNestedInput
  }

  export type StationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    planetId?: StringFieldUpdateOperationsInput | string
    Recharge?: RechargeUncheckedUpdateManyWithoutStationsNestedInput
  }

  export type StationsCreateManyInput = {
    id?: string
    planetId: string
  }

  export type StationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type StationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    planetId?: StringFieldUpdateOperationsInput | string
  }

  export type RechargeCreateInput = {
    id?: string
    start?: Date | string
    end: Date | string
    reservation?: boolean
    status?: string
    updatedAt?: Date | string
    user: UsersCreateNestedOneWithoutRechargeInput
    stations: StationsCreateNestedOneWithoutRechargeInput
  }

  export type RechargeUncheckedCreateInput = {
    id?: string
    start?: Date | string
    end: Date | string
    reservation?: boolean
    status?: string
    userId: string
    stationId: string
    updatedAt?: Date | string
  }

  export type RechargeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    reservation?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutRechargeNestedInput
    stations?: StationsUpdateOneRequiredWithoutRechargeNestedInput
  }

  export type RechargeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    reservation?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RechargeCreateManyInput = {
    id?: string
    start?: Date | string
    end: Date | string
    reservation?: boolean
    status?: string
    userId: string
    stationId: string
    updatedAt?: Date | string
  }

  export type RechargeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    reservation?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RechargeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    reservation?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type TokensListRelationFilter = {
    every?: TokensWhereInput
    some?: TokensWhereInput
    none?: TokensWhereInput
  }

  export type RechargeListRelationFilter = {
    every?: RechargeWhereInput
    some?: RechargeWhereInput
    none?: RechargeWhereInput
  }

  export type TokensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RechargeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type TokensCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
  }

  export type TokensMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
  }

  export type TokensMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StationsListRelationFilter = {
    every?: StationsWhereInput
    some?: StationsWhereInput
    none?: StationsWhereInput
  }

  export type StationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SuitablePlanetsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    hasStation?: SortOrder
  }

  export type SuitablePlanetsAvgOrderByAggregateInput = {
    mass?: SortOrder
  }

  export type SuitablePlanetsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    hasStation?: SortOrder
  }

  export type SuitablePlanetsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    mass?: SortOrder
    hasStation?: SortOrder
  }

  export type SuitablePlanetsSumOrderByAggregateInput = {
    mass?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type SuitablePlanetsRelationFilter = {
    is?: SuitablePlanetsWhereInput | null
    isNot?: SuitablePlanetsWhereInput | null
  }

  export type StationsCountOrderByAggregateInput = {
    id?: SortOrder
    planetId?: SortOrder
  }

  export type StationsMaxOrderByAggregateInput = {
    id?: SortOrder
    planetId?: SortOrder
  }

  export type StationsMinOrderByAggregateInput = {
    id?: SortOrder
    planetId?: SortOrder
  }

  export type StationsRelationFilter = {
    is?: StationsWhereInput | null
    isNot?: StationsWhereInput | null
  }

  export type RechargeCountOrderByAggregateInput = {
    id?: SortOrder
    start?: SortOrder
    end?: SortOrder
    reservation?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    updatedAt?: SortOrder
  }

  export type RechargeMaxOrderByAggregateInput = {
    id?: SortOrder
    start?: SortOrder
    end?: SortOrder
    reservation?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    updatedAt?: SortOrder
  }

  export type RechargeMinOrderByAggregateInput = {
    id?: SortOrder
    start?: SortOrder
    end?: SortOrder
    reservation?: SortOrder
    status?: SortOrder
    userId?: SortOrder
    stationId?: SortOrder
    updatedAt?: SortOrder
  }

  export type TokensCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TokensCreateWithoutUserInput>, Enumerable<TokensUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokensCreateOrConnectWithoutUserInput>
    createMany?: TokensCreateManyUserInputEnvelope
    connect?: Enumerable<TokensWhereUniqueInput>
  }

  export type RechargeCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RechargeCreateWithoutUserInput>, Enumerable<RechargeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RechargeCreateOrConnectWithoutUserInput>
    createMany?: RechargeCreateManyUserInputEnvelope
    connect?: Enumerable<RechargeWhereUniqueInput>
  }

  export type TokensUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TokensCreateWithoutUserInput>, Enumerable<TokensUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokensCreateOrConnectWithoutUserInput>
    createMany?: TokensCreateManyUserInputEnvelope
    connect?: Enumerable<TokensWhereUniqueInput>
  }

  export type RechargeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RechargeCreateWithoutUserInput>, Enumerable<RechargeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RechargeCreateOrConnectWithoutUserInput>
    createMany?: RechargeCreateManyUserInputEnvelope
    connect?: Enumerable<RechargeWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TokensUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TokensCreateWithoutUserInput>, Enumerable<TokensUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokensCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TokensUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TokensCreateManyUserInputEnvelope
    set?: Enumerable<TokensWhereUniqueInput>
    disconnect?: Enumerable<TokensWhereUniqueInput>
    delete?: Enumerable<TokensWhereUniqueInput>
    connect?: Enumerable<TokensWhereUniqueInput>
    update?: Enumerable<TokensUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TokensUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TokensScalarWhereInput>
  }

  export type RechargeUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RechargeCreateWithoutUserInput>, Enumerable<RechargeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RechargeCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RechargeUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RechargeCreateManyUserInputEnvelope
    set?: Enumerable<RechargeWhereUniqueInput>
    disconnect?: Enumerable<RechargeWhereUniqueInput>
    delete?: Enumerable<RechargeWhereUniqueInput>
    connect?: Enumerable<RechargeWhereUniqueInput>
    update?: Enumerable<RechargeUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RechargeUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RechargeScalarWhereInput>
  }

  export type TokensUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TokensCreateWithoutUserInput>, Enumerable<TokensUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TokensCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TokensUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TokensCreateManyUserInputEnvelope
    set?: Enumerable<TokensWhereUniqueInput>
    disconnect?: Enumerable<TokensWhereUniqueInput>
    delete?: Enumerable<TokensWhereUniqueInput>
    connect?: Enumerable<TokensWhereUniqueInput>
    update?: Enumerable<TokensUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TokensUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TokensScalarWhereInput>
  }

  export type RechargeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<RechargeCreateWithoutUserInput>, Enumerable<RechargeUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RechargeCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RechargeUpsertWithWhereUniqueWithoutUserInput>
    createMany?: RechargeCreateManyUserInputEnvelope
    set?: Enumerable<RechargeWhereUniqueInput>
    disconnect?: Enumerable<RechargeWhereUniqueInput>
    delete?: Enumerable<RechargeWhereUniqueInput>
    connect?: Enumerable<RechargeWhereUniqueInput>
    update?: Enumerable<RechargeUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RechargeUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RechargeScalarWhereInput>
  }

  export type UsersCreateNestedOneWithoutTokensInput = {
    create?: XOR<UsersCreateWithoutTokensInput, UsersUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTokensInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutTokensNestedInput = {
    create?: XOR<UsersCreateWithoutTokensInput, UsersUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTokensInput
    upsert?: UsersUpsertWithoutTokensInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutTokensInput, UsersUncheckedUpdateWithoutTokensInput>
  }

  export type StationsCreateNestedManyWithoutSuitablePlanetsInput = {
    create?: XOR<Enumerable<StationsCreateWithoutSuitablePlanetsInput>, Enumerable<StationsUncheckedCreateWithoutSuitablePlanetsInput>>
    connectOrCreate?: Enumerable<StationsCreateOrConnectWithoutSuitablePlanetsInput>
    createMany?: StationsCreateManySuitablePlanetsInputEnvelope
    connect?: Enumerable<StationsWhereUniqueInput>
  }

  export type StationsUncheckedCreateNestedManyWithoutSuitablePlanetsInput = {
    create?: XOR<Enumerable<StationsCreateWithoutSuitablePlanetsInput>, Enumerable<StationsUncheckedCreateWithoutSuitablePlanetsInput>>
    connectOrCreate?: Enumerable<StationsCreateOrConnectWithoutSuitablePlanetsInput>
    createMany?: StationsCreateManySuitablePlanetsInputEnvelope
    connect?: Enumerable<StationsWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type StationsUpdateManyWithoutSuitablePlanetsNestedInput = {
    create?: XOR<Enumerable<StationsCreateWithoutSuitablePlanetsInput>, Enumerable<StationsUncheckedCreateWithoutSuitablePlanetsInput>>
    connectOrCreate?: Enumerable<StationsCreateOrConnectWithoutSuitablePlanetsInput>
    upsert?: Enumerable<StationsUpsertWithWhereUniqueWithoutSuitablePlanetsInput>
    createMany?: StationsCreateManySuitablePlanetsInputEnvelope
    set?: Enumerable<StationsWhereUniqueInput>
    disconnect?: Enumerable<StationsWhereUniqueInput>
    delete?: Enumerable<StationsWhereUniqueInput>
    connect?: Enumerable<StationsWhereUniqueInput>
    update?: Enumerable<StationsUpdateWithWhereUniqueWithoutSuitablePlanetsInput>
    updateMany?: Enumerable<StationsUpdateManyWithWhereWithoutSuitablePlanetsInput>
    deleteMany?: Enumerable<StationsScalarWhereInput>
  }

  export type StationsUncheckedUpdateManyWithoutSuitablePlanetsNestedInput = {
    create?: XOR<Enumerable<StationsCreateWithoutSuitablePlanetsInput>, Enumerable<StationsUncheckedCreateWithoutSuitablePlanetsInput>>
    connectOrCreate?: Enumerable<StationsCreateOrConnectWithoutSuitablePlanetsInput>
    upsert?: Enumerable<StationsUpsertWithWhereUniqueWithoutSuitablePlanetsInput>
    createMany?: StationsCreateManySuitablePlanetsInputEnvelope
    set?: Enumerable<StationsWhereUniqueInput>
    disconnect?: Enumerable<StationsWhereUniqueInput>
    delete?: Enumerable<StationsWhereUniqueInput>
    connect?: Enumerable<StationsWhereUniqueInput>
    update?: Enumerable<StationsUpdateWithWhereUniqueWithoutSuitablePlanetsInput>
    updateMany?: Enumerable<StationsUpdateManyWithWhereWithoutSuitablePlanetsInput>
    deleteMany?: Enumerable<StationsScalarWhereInput>
  }

  export type SuitablePlanetsCreateNestedOneWithoutStationsInput = {
    create?: XOR<SuitablePlanetsCreateWithoutStationsInput, SuitablePlanetsUncheckedCreateWithoutStationsInput>
    connectOrCreate?: SuitablePlanetsCreateOrConnectWithoutStationsInput
    connect?: SuitablePlanetsWhereUniqueInput
  }

  export type RechargeCreateNestedManyWithoutStationsInput = {
    create?: XOR<Enumerable<RechargeCreateWithoutStationsInput>, Enumerable<RechargeUncheckedCreateWithoutStationsInput>>
    connectOrCreate?: Enumerable<RechargeCreateOrConnectWithoutStationsInput>
    createMany?: RechargeCreateManyStationsInputEnvelope
    connect?: Enumerable<RechargeWhereUniqueInput>
  }

  export type RechargeUncheckedCreateNestedManyWithoutStationsInput = {
    create?: XOR<Enumerable<RechargeCreateWithoutStationsInput>, Enumerable<RechargeUncheckedCreateWithoutStationsInput>>
    connectOrCreate?: Enumerable<RechargeCreateOrConnectWithoutStationsInput>
    createMany?: RechargeCreateManyStationsInputEnvelope
    connect?: Enumerable<RechargeWhereUniqueInput>
  }

  export type SuitablePlanetsUpdateOneRequiredWithoutStationsNestedInput = {
    create?: XOR<SuitablePlanetsCreateWithoutStationsInput, SuitablePlanetsUncheckedCreateWithoutStationsInput>
    connectOrCreate?: SuitablePlanetsCreateOrConnectWithoutStationsInput
    upsert?: SuitablePlanetsUpsertWithoutStationsInput
    connect?: SuitablePlanetsWhereUniqueInput
    update?: XOR<SuitablePlanetsUpdateWithoutStationsInput, SuitablePlanetsUncheckedUpdateWithoutStationsInput>
  }

  export type RechargeUpdateManyWithoutStationsNestedInput = {
    create?: XOR<Enumerable<RechargeCreateWithoutStationsInput>, Enumerable<RechargeUncheckedCreateWithoutStationsInput>>
    connectOrCreate?: Enumerable<RechargeCreateOrConnectWithoutStationsInput>
    upsert?: Enumerable<RechargeUpsertWithWhereUniqueWithoutStationsInput>
    createMany?: RechargeCreateManyStationsInputEnvelope
    set?: Enumerable<RechargeWhereUniqueInput>
    disconnect?: Enumerable<RechargeWhereUniqueInput>
    delete?: Enumerable<RechargeWhereUniqueInput>
    connect?: Enumerable<RechargeWhereUniqueInput>
    update?: Enumerable<RechargeUpdateWithWhereUniqueWithoutStationsInput>
    updateMany?: Enumerable<RechargeUpdateManyWithWhereWithoutStationsInput>
    deleteMany?: Enumerable<RechargeScalarWhereInput>
  }

  export type RechargeUncheckedUpdateManyWithoutStationsNestedInput = {
    create?: XOR<Enumerable<RechargeCreateWithoutStationsInput>, Enumerable<RechargeUncheckedCreateWithoutStationsInput>>
    connectOrCreate?: Enumerable<RechargeCreateOrConnectWithoutStationsInput>
    upsert?: Enumerable<RechargeUpsertWithWhereUniqueWithoutStationsInput>
    createMany?: RechargeCreateManyStationsInputEnvelope
    set?: Enumerable<RechargeWhereUniqueInput>
    disconnect?: Enumerable<RechargeWhereUniqueInput>
    delete?: Enumerable<RechargeWhereUniqueInput>
    connect?: Enumerable<RechargeWhereUniqueInput>
    update?: Enumerable<RechargeUpdateWithWhereUniqueWithoutStationsInput>
    updateMany?: Enumerable<RechargeUpdateManyWithWhereWithoutStationsInput>
    deleteMany?: Enumerable<RechargeScalarWhereInput>
  }

  export type UsersCreateNestedOneWithoutRechargeInput = {
    create?: XOR<UsersCreateWithoutRechargeInput, UsersUncheckedCreateWithoutRechargeInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRechargeInput
    connect?: UsersWhereUniqueInput
  }

  export type StationsCreateNestedOneWithoutRechargeInput = {
    create?: XOR<StationsCreateWithoutRechargeInput, StationsUncheckedCreateWithoutRechargeInput>
    connectOrCreate?: StationsCreateOrConnectWithoutRechargeInput
    connect?: StationsWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutRechargeNestedInput = {
    create?: XOR<UsersCreateWithoutRechargeInput, UsersUncheckedCreateWithoutRechargeInput>
    connectOrCreate?: UsersCreateOrConnectWithoutRechargeInput
    upsert?: UsersUpsertWithoutRechargeInput
    connect?: UsersWhereUniqueInput
    update?: XOR<UsersUpdateWithoutRechargeInput, UsersUncheckedUpdateWithoutRechargeInput>
  }

  export type StationsUpdateOneRequiredWithoutRechargeNestedInput = {
    create?: XOR<StationsCreateWithoutRechargeInput, StationsUncheckedCreateWithoutRechargeInput>
    connectOrCreate?: StationsCreateOrConnectWithoutRechargeInput
    upsert?: StationsUpsertWithoutRechargeInput
    connect?: StationsWhereUniqueInput
    update?: XOR<StationsUpdateWithoutRechargeInput, StationsUncheckedUpdateWithoutRechargeInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type TokensCreateWithoutUserInput = {
    id?: string
    token: string
  }

  export type TokensUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
  }

  export type TokensCreateOrConnectWithoutUserInput = {
    where: TokensWhereUniqueInput
    create: XOR<TokensCreateWithoutUserInput, TokensUncheckedCreateWithoutUserInput>
  }

  export type TokensCreateManyUserInputEnvelope = {
    data: Enumerable<TokensCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type RechargeCreateWithoutUserInput = {
    id?: string
    start?: Date | string
    end: Date | string
    reservation?: boolean
    status?: string
    updatedAt?: Date | string
    stations: StationsCreateNestedOneWithoutRechargeInput
  }

  export type RechargeUncheckedCreateWithoutUserInput = {
    id?: string
    start?: Date | string
    end: Date | string
    reservation?: boolean
    status?: string
    stationId: string
    updatedAt?: Date | string
  }

  export type RechargeCreateOrConnectWithoutUserInput = {
    where: RechargeWhereUniqueInput
    create: XOR<RechargeCreateWithoutUserInput, RechargeUncheckedCreateWithoutUserInput>
  }

  export type RechargeCreateManyUserInputEnvelope = {
    data: Enumerable<RechargeCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type TokensUpsertWithWhereUniqueWithoutUserInput = {
    where: TokensWhereUniqueInput
    update: XOR<TokensUpdateWithoutUserInput, TokensUncheckedUpdateWithoutUserInput>
    create: XOR<TokensCreateWithoutUserInput, TokensUncheckedCreateWithoutUserInput>
  }

  export type TokensUpdateWithWhereUniqueWithoutUserInput = {
    where: TokensWhereUniqueInput
    data: XOR<TokensUpdateWithoutUserInput, TokensUncheckedUpdateWithoutUserInput>
  }

  export type TokensUpdateManyWithWhereWithoutUserInput = {
    where: TokensScalarWhereInput
    data: XOR<TokensUpdateManyMutationInput, TokensUncheckedUpdateManyWithoutTokensInput>
  }

  export type TokensScalarWhereInput = {
    AND?: Enumerable<TokensScalarWhereInput>
    OR?: Enumerable<TokensScalarWhereInput>
    NOT?: Enumerable<TokensScalarWhereInput>
    id?: StringFilter | string
    token?: StringFilter | string
    userId?: StringFilter | string
  }

  export type RechargeUpsertWithWhereUniqueWithoutUserInput = {
    where: RechargeWhereUniqueInput
    update: XOR<RechargeUpdateWithoutUserInput, RechargeUncheckedUpdateWithoutUserInput>
    create: XOR<RechargeCreateWithoutUserInput, RechargeUncheckedCreateWithoutUserInput>
  }

  export type RechargeUpdateWithWhereUniqueWithoutUserInput = {
    where: RechargeWhereUniqueInput
    data: XOR<RechargeUpdateWithoutUserInput, RechargeUncheckedUpdateWithoutUserInput>
  }

  export type RechargeUpdateManyWithWhereWithoutUserInput = {
    where: RechargeScalarWhereInput
    data: XOR<RechargeUpdateManyMutationInput, RechargeUncheckedUpdateManyWithoutRechargeInput>
  }

  export type RechargeScalarWhereInput = {
    AND?: Enumerable<RechargeScalarWhereInput>
    OR?: Enumerable<RechargeScalarWhereInput>
    NOT?: Enumerable<RechargeScalarWhereInput>
    id?: StringFilter | string
    start?: DateTimeFilter | Date | string
    end?: DateTimeFilter | Date | string
    reservation?: BoolFilter | boolean
    status?: StringFilter | string
    userId?: StringFilter | string
    stationId?: StringFilter | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UsersCreateWithoutTokensInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    Recharge?: RechargeCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutTokensInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    Recharge?: RechargeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutTokensInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutTokensInput, UsersUncheckedCreateWithoutTokensInput>
  }

  export type UsersUpsertWithoutTokensInput = {
    update: XOR<UsersUpdateWithoutTokensInput, UsersUncheckedUpdateWithoutTokensInput>
    create: XOR<UsersCreateWithoutTokensInput, UsersUncheckedCreateWithoutTokensInput>
  }

  export type UsersUpdateWithoutTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Recharge?: RechargeUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Recharge?: RechargeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StationsCreateWithoutSuitablePlanetsInput = {
    id?: string
    Recharge?: RechargeCreateNestedManyWithoutStationsInput
  }

  export type StationsUncheckedCreateWithoutSuitablePlanetsInput = {
    id?: string
    Recharge?: RechargeUncheckedCreateNestedManyWithoutStationsInput
  }

  export type StationsCreateOrConnectWithoutSuitablePlanetsInput = {
    where: StationsWhereUniqueInput
    create: XOR<StationsCreateWithoutSuitablePlanetsInput, StationsUncheckedCreateWithoutSuitablePlanetsInput>
  }

  export type StationsCreateManySuitablePlanetsInputEnvelope = {
    data: Enumerable<StationsCreateManySuitablePlanetsInput>
    skipDuplicates?: boolean
  }

  export type StationsUpsertWithWhereUniqueWithoutSuitablePlanetsInput = {
    where: StationsWhereUniqueInput
    update: XOR<StationsUpdateWithoutSuitablePlanetsInput, StationsUncheckedUpdateWithoutSuitablePlanetsInput>
    create: XOR<StationsCreateWithoutSuitablePlanetsInput, StationsUncheckedCreateWithoutSuitablePlanetsInput>
  }

  export type StationsUpdateWithWhereUniqueWithoutSuitablePlanetsInput = {
    where: StationsWhereUniqueInput
    data: XOR<StationsUpdateWithoutSuitablePlanetsInput, StationsUncheckedUpdateWithoutSuitablePlanetsInput>
  }

  export type StationsUpdateManyWithWhereWithoutSuitablePlanetsInput = {
    where: StationsScalarWhereInput
    data: XOR<StationsUpdateManyMutationInput, StationsUncheckedUpdateManyWithoutStationsInput>
  }

  export type StationsScalarWhereInput = {
    AND?: Enumerable<StationsScalarWhereInput>
    OR?: Enumerable<StationsScalarWhereInput>
    NOT?: Enumerable<StationsScalarWhereInput>
    id?: StringFilter | string
    planetId?: StringFilter | string
  }

  export type SuitablePlanetsCreateWithoutStationsInput = {
    id?: string
    name: string
    mass: number
    hasStation: boolean
  }

  export type SuitablePlanetsUncheckedCreateWithoutStationsInput = {
    id?: string
    name: string
    mass: number
    hasStation: boolean
  }

  export type SuitablePlanetsCreateOrConnectWithoutStationsInput = {
    where: SuitablePlanetsWhereUniqueInput
    create: XOR<SuitablePlanetsCreateWithoutStationsInput, SuitablePlanetsUncheckedCreateWithoutStationsInput>
  }

  export type RechargeCreateWithoutStationsInput = {
    id?: string
    start?: Date | string
    end: Date | string
    reservation?: boolean
    status?: string
    updatedAt?: Date | string
    user: UsersCreateNestedOneWithoutRechargeInput
  }

  export type RechargeUncheckedCreateWithoutStationsInput = {
    id?: string
    start?: Date | string
    end: Date | string
    reservation?: boolean
    status?: string
    userId: string
    updatedAt?: Date | string
  }

  export type RechargeCreateOrConnectWithoutStationsInput = {
    where: RechargeWhereUniqueInput
    create: XOR<RechargeCreateWithoutStationsInput, RechargeUncheckedCreateWithoutStationsInput>
  }

  export type RechargeCreateManyStationsInputEnvelope = {
    data: Enumerable<RechargeCreateManyStationsInput>
    skipDuplicates?: boolean
  }

  export type SuitablePlanetsUpsertWithoutStationsInput = {
    update: XOR<SuitablePlanetsUpdateWithoutStationsInput, SuitablePlanetsUncheckedUpdateWithoutStationsInput>
    create: XOR<SuitablePlanetsCreateWithoutStationsInput, SuitablePlanetsUncheckedCreateWithoutStationsInput>
  }

  export type SuitablePlanetsUpdateWithoutStationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mass?: FloatFieldUpdateOperationsInput | number
    hasStation?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SuitablePlanetsUncheckedUpdateWithoutStationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    mass?: FloatFieldUpdateOperationsInput | number
    hasStation?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RechargeUpsertWithWhereUniqueWithoutStationsInput = {
    where: RechargeWhereUniqueInput
    update: XOR<RechargeUpdateWithoutStationsInput, RechargeUncheckedUpdateWithoutStationsInput>
    create: XOR<RechargeCreateWithoutStationsInput, RechargeUncheckedCreateWithoutStationsInput>
  }

  export type RechargeUpdateWithWhereUniqueWithoutStationsInput = {
    where: RechargeWhereUniqueInput
    data: XOR<RechargeUpdateWithoutStationsInput, RechargeUncheckedUpdateWithoutStationsInput>
  }

  export type RechargeUpdateManyWithWhereWithoutStationsInput = {
    where: RechargeScalarWhereInput
    data: XOR<RechargeUpdateManyMutationInput, RechargeUncheckedUpdateManyWithoutRechargeInput>
  }

  export type UsersCreateWithoutRechargeInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    tokens?: TokensCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutRechargeInput = {
    id?: string
    email: string
    password: string
    createdAt?: Date | string
    tokens?: TokensUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutRechargeInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutRechargeInput, UsersUncheckedCreateWithoutRechargeInput>
  }

  export type StationsCreateWithoutRechargeInput = {
    id?: string
    suitablePlanets: SuitablePlanetsCreateNestedOneWithoutStationsInput
  }

  export type StationsUncheckedCreateWithoutRechargeInput = {
    id?: string
    planetId: string
  }

  export type StationsCreateOrConnectWithoutRechargeInput = {
    where: StationsWhereUniqueInput
    create: XOR<StationsCreateWithoutRechargeInput, StationsUncheckedCreateWithoutRechargeInput>
  }

  export type UsersUpsertWithoutRechargeInput = {
    update: XOR<UsersUpdateWithoutRechargeInput, UsersUncheckedUpdateWithoutRechargeInput>
    create: XOR<UsersCreateWithoutRechargeInput, UsersUncheckedCreateWithoutRechargeInput>
  }

  export type UsersUpdateWithoutRechargeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokensUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutRechargeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tokens?: TokensUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StationsUpsertWithoutRechargeInput = {
    update: XOR<StationsUpdateWithoutRechargeInput, StationsUncheckedUpdateWithoutRechargeInput>
    create: XOR<StationsCreateWithoutRechargeInput, StationsUncheckedCreateWithoutRechargeInput>
  }

  export type StationsUpdateWithoutRechargeInput = {
    id?: StringFieldUpdateOperationsInput | string
    suitablePlanets?: SuitablePlanetsUpdateOneRequiredWithoutStationsNestedInput
  }

  export type StationsUncheckedUpdateWithoutRechargeInput = {
    id?: StringFieldUpdateOperationsInput | string
    planetId?: StringFieldUpdateOperationsInput | string
  }

  export type TokensCreateManyUserInput = {
    id?: string
    token: string
  }

  export type RechargeCreateManyUserInput = {
    id?: string
    start?: Date | string
    end: Date | string
    reservation?: boolean
    status?: string
    stationId: string
    updatedAt?: Date | string
  }

  export type TokensUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type TokensUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type TokensUncheckedUpdateManyWithoutTokensInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type RechargeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    reservation?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stations?: StationsUpdateOneRequiredWithoutRechargeNestedInput
  }

  export type RechargeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    reservation?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RechargeUncheckedUpdateManyWithoutRechargeInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    reservation?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    stationId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StationsCreateManySuitablePlanetsInput = {
    id?: string
  }

  export type StationsUpdateWithoutSuitablePlanetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    Recharge?: RechargeUpdateManyWithoutStationsNestedInput
  }

  export type StationsUncheckedUpdateWithoutSuitablePlanetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    Recharge?: RechargeUncheckedUpdateManyWithoutStationsNestedInput
  }

  export type StationsUncheckedUpdateManyWithoutStationsInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type RechargeCreateManyStationsInput = {
    id?: string
    start?: Date | string
    end: Date | string
    reservation?: boolean
    status?: string
    userId: string
    updatedAt?: Date | string
  }

  export type RechargeUpdateWithoutStationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    reservation?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutRechargeNestedInput
  }

  export type RechargeUncheckedUpdateWithoutStationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    reservation?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}